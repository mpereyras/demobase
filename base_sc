

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ContratoSimple {
    address public owner;
    uint256 public balance;

    event Deposit(address indexed account, uint256 amount);
    event Withdraw(address indexed account, uint256 amount);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Solo el propietario puede llamar a esta funcion");
        _;
    }
    
    function deposit() external payable {
        require(msg.value > 0, "La cantidad a depositar debe ser mayor a cero");
        balance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 amount) external onlyOwner {
        require(amount > 0, "La cantidad a retirar debe ser mayor a cero");
        require(amount <= balance, "No hay suficientes fondos disponibles para retirar");
        balance -= amount;
        payable(msg.sender).transfer(amount);
        emit Withdraw(msg.sender, amount);
    }

    function getBalance() external view returns (uint256) {
        return balance;
    }
}
